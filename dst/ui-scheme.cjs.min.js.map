{"version":3,"file":"ui-scheme.cjs.min.js","sources":["../src/utils/parsing.js","../src/utils/log.js","../src/core/symbols.js","../src/core/EventsChannel.js","../src/core/Extendable.js","../src/core/EventsTarget.js","../src/core/Element.js","../src/core/Styles.js","../src/core/Scheme.js","../src/utils/id-generator.js","../src/core/UI.js","../src/cjs.js","../src/core/Localization.js"],"sourcesContent":["import {warn} from './log';\r\n\r\nlet allowedTagNames = [\r\n    'div',\r\n    'p', 'span', 'a',\r\n    'b', 'i', 'u', 'sup', 'sub',\r\n    'font',\r\n    'meta',\r\n    'form', 'label', 'input', 'select', 'option', 'textarea', 'button',\r\n    'ul', 'ol', 'li',\r\n    'table', 'tbody', 'thead', 'tr', 'td',\r\n    'img', 'video', 'source', 'canvas',\r\n    'script', 'style', 'title', \r\n    'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\r\n    'blockquote', 'br', 'hr',\r\n    'main', 'section', 'article'\r\n];\r\n\r\nlet tagNameRegex    = /(^|\\s)\\w+/ig;\r\nlet classNamesRegex = /\\.\\w+[_\\-\\w\\d]*/ig;\r\nlet idRegex         = /#\\w+[_\\-\\w]*/ig;\r\n\r\n/**\r\n * Parses selector and returns tag name.\r\n * Also checks if tag name is valid.\r\n * \r\n * @param {string} selector \r\n */\r\nexport function parseTagName(selector) {\r\n    let tagName = selector.match(tagNameRegex);\r\n\r\n    if (tagName !== null && tagName.length > 0) {\r\n        tagName =  tagName[0];\r\n    }\r\n\r\n    if (tagName === null || tagName.length === 0) {\r\n        return 'div';\r\n    }\r\n\r\n    if (!allowedTagNames.includes(tagName)) {\r\n        warn('Invalid tag name used: ' + tagName);\r\n    }\r\n\r\n    if (tagName == undefined) {\r\n        return 'div';\r\n    }\r\n\r\n    return tagName;\r\n}\r\n\r\n/**\r\n * Parses selector and returns class name.\r\n * Few classes can be separated by space.\r\n * \r\n * @param {string} selector\r\n * @return {Array}\r\n */\r\nexport function parseClassNames(selector) {\r\n    let classNames = selector.match(classNamesRegex);\r\n    if (classNames !== null && classNames.length > 0) {\r\n        for (let i = 0; i < classNames.length; i++) {\r\n            classNames[i] = camelCaseToDashSeparated(classNames[i].slice(1));\r\n        }\r\n    }\r\n    return classNames === null ? [] : classNames;\r\n}\r\n\r\n/**\r\n * Parses ID from the given selector.\r\n * \r\n * @param {string} selector\r\n * @return {string}\r\n */\r\nexport function parseId(selector) {\r\n    let id = selector.match(idRegex);\r\n    if (id !== null && id.length > 0) {\r\n        return id[0].slice(1).trim();\r\n    }\r\n    return '';\r\n}\r\n\r\n/**\r\n * Parses attributes from the given selector.\r\n * \r\n * @param {Object} selector \r\n */\r\nexport function parseAttributes(selector) {\r\n    let attr = {}\r\n    let f = selector.split('[')\r\n    if (f.length > 1) {\r\n        f = f.split(']')\r\n        if (f.length > 0) {\r\n            f = f.split(/;,/)\r\n            for (let i = 0; i < f.length; i++) {\r\n                let a = f[i].split('=')\r\n                attr[a[0].trim()] = a.length > 1 ? a[1] : ''\r\n            }\r\n        }\r\n    }\r\n    return attr\r\n}\r\n\r\n\r\n/**\r\n * Splits string bu upper case.\r\n * @para {string} str\r\n * @return {Array}\r\n */\r\nexport function splitByUpperCase(str) {\r\n    return str.replace(/([A-Z]+)/g, \",$1\")\r\n        .replace(/^,/, '')\r\n        .split(',');\r\n}\r\n\r\n\r\n/**\r\n * Formats string to be useful in the \"id\" or \"class\" attribute.\r\n * @param {string} str\r\n * @return {string}\r\n */\r\nexport function camelCaseToDashSeparated(str) {\r\n    return splitByUpperCase(str.replace(/\\//g, '_').replace(' - ', '-'))\r\n        .join('-')\r\n        .replace(/([a-zA-Z_-])\\s+([a-zA-Z_\\-\\d])/g, \"$1-$2\")\r\n        .replace(/\\s*-+\\s*/gi, '-')\r\n        .replace(/-*_-*/gi, '_')\r\n        .toLowerCase();\r\n}","let logPrefix = 'UIScheme:'\r\n\r\n\r\nexport function info(msg) {\r\n    console.info(logPrefix, msg)\r\n}\r\n\r\nexport function warn(msg) {\r\n    console.warn(logPrefix, msg)\r\n}\r\n\r\nexport function error(msg) {\r\n    console.warn(logPrefix, msg)\r\n}","export const selectorSymbol     = Symbol('selector')\r\nexport const dataSymbol         = Symbol('data')\r\nexport const classesArraySymbol = Symbol('classesArray')\r\nexport const classNameSymbol    = Symbol('className')\r\nexport const idSymbol           = Symbol('id');\r\nexport const tagNameSymbol      = Symbol('tagName')\r\nexport const eventsSymbol       = Symbol('events')\r\nexport const extensionsSymbol   = Symbol('extensions')\r\nexport const elementSymbol      = Symbol('element')\r\nexport const isStylesRendered   = Symbol('stylesRendered')\r\nexport const targetSymbol       = Symbol('target')\r\n\r\n","let channels = {}\r\n\r\nexport default class EventsChannel\r\n{\r\n    constructor(context) {\r\n        this.context = context === undefined ? this : context\r\n        this.name = null\r\n        this.handlers = {}\r\n    }\r\n\r\n    on(eventName, handler) {\r\n        let arr = eventName.split('->')\r\n        arr.forEach((el, i, a) => a[i] = el.trim())\r\n\r\n        if (!this.handlers.hasOwnProperty(arr[0])) {\r\n            this.handlers[arr[0]] = new HandlersHub(arr[0])\r\n        }\r\n        this.handlers[arr[0]].addHandler(handler, arr.length > 1 ? arr[1] : undefined)\r\n    }\r\n\r\n    off(eventName) {\r\n        let arr = eventName.split('->')\r\n        arr.forEach((el, i, a) => a[i] = el.trim())\r\n\r\n        if (this.handlers.hasOwnProperty(arr[0])) {\r\n            if (arr.length > 1 && arr[1].length > 0) {\r\n                this.handlers[arr[0]].removePortHandler(arr[1])\r\n            } else {\r\n                this.handlers[arr[0]].removeAllHandlers()\r\n            }\r\n        }\r\n    }\r\n\r\n    trigger(eventName, ...params) {\r\n        let arr = eventName.split('->')\r\n        arr.forEach((el, i, a) => a[i] = el.trim())\r\n\r\n        if (this.handlers.hasOwnProperty(arr[0])) {\r\n            if (arr.length > 1 && arr[1].length > 0) {\r\n                this.handlers[arr[0]].runPortHandler(arr[1], this.context, ...params)\r\n            } else {\r\n                this.handlers[arr[0]].runAllHandlers(this.context, ...params)\r\n            }\r\n        }\r\n    }\r\n\r\n    triggerDirect(eventName, ...params) {\r\n        if (this.handlers.hasOwnProperty(eventName)) {\r\n            this.handlers[eventName].runAllHandlers(this.context, ...params)\r\n        }\r\n    }\r\n\r\n    static get(name, context) {\r\n    \tif (!channels.hasOwnProperty(name)) {\r\n            channels[name] = new EventsChannel(context)\r\n            channels[name].name = name\r\n    \t}\r\n    \treturn channels[name]\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nclass HandlersHub\r\n{\r\n\tconstructor(eventName) {\r\n        this.eventName = eventName\r\n\t\tthis.handlers = []\r\n\t\tthis.ports = {}\r\n    }\r\n    \r\n    addHandler(handler, port) {\r\n        if (port === undefined) {\r\n            this.handlers.push(handler)\r\n        } else {\r\n            this.ports[port] = handler\r\n        }\r\n    }\r\n\r\n    removeAllHandlers() {\r\n        this.handlers = []\r\n        this.ports = {}\r\n    }\r\n\r\n    removePortHandler(port) {\r\n        delete(this.ports[port])\r\n    }\r\n\r\n    runPortHandler(port, context, ...params) {\r\n        if (this.ports.hasOwnProperty(port)) {\r\n            this.ports[port].call(context, ...params)\r\n        }\r\n    }\r\n\r\n    runAllHandlers(context, ...params) {\r\n        for (let i = 0; i < this.handlers.length; i++) {\r\n            this.handlers[i].call(context, ...params)\r\n        }\r\n        for (let p in this.ports) {\r\n            this.ports[p].call(context, ...params)\r\n        }\r\n    }\r\n}\r\n","import EventsTarget from './EventsTarget'\r\nimport { extensionsSymbol } from './symbols'\r\n\r\nexport default class Extendable extends EventsTarget\r\n{\r\n    constructor() {\r\n        super()\r\n        this[extensionsSymbol] = []\r\n    }\r\n}","import { eventsSymbol } from './symbols'\r\nimport EventsChannel from './EventsChannel'\r\n\r\n\r\nexport default class EventsTarget\r\n{\r\n    constructor()\r\n    {\r\n        this[eventsSymbol] = new EventsChannel(this)\r\n    }\r\n\r\n    /**\r\n     * Adds event listener.\r\n     * Named listeners can be used:\r\n     * chat.on('message -> tray', msg => console.log(msg))\r\n     * \r\n     * @param {string} eventName \r\n     * @param {function} handler \r\n     */\r\n    on(eventName, handler) {\r\n        this[eventsSymbol].on(eventName, handler)\r\n    }\r\n\r\n    /**\r\n     * Removes event listener.\r\n     * \r\n     * @param {string} eventName \r\n     * @param {function} [handler]\r\n     */\r\n    off(eventName, handler) {\r\n        this[eventsSymbol].off(eventName, handler)\r\n    }\r\n\r\n    /**\r\n     * Fires event with given name.\r\n     * \r\n     * @param {*} eventName \r\n     * @param  {...any} data \r\n     */\r\n    trigger(eventName, ...data) {\r\n        this[eventsSymbol].trigger(eventName, ...data)\r\n    }\r\n}","import { parseTagName, parseId, parseClassNames, camelCaseToDashSeparated } from '../utils/parsing'\r\nimport { elementSymbol, eventsSymbol, extensionsSymbol } from './symbols'\r\nimport Extendable from './Extendable'\r\n\r\n\r\nexport default class Element extends Extendable\r\n{\r\n    constructor(selector) {\r\n        super()\r\n\r\n        let tagName = parseTagName(selector).toLowerCase()\r\n\r\n        // Create node for the element and save reference to it in hidden property.\r\n        this.node = document.createElement(tagName)\r\n        this.node[elementSymbol] = this\r\n\r\n        // Set id.\r\n        let id = parseId(selector)\r\n        if (id !== '') {\r\n            this.node.id = id\r\n        }\r\n        \r\n        // Set class name.\r\n        let className = parseClassNames(selector).join(' ')\r\n        if (className !== '') {\r\n            this.node.className = className\r\n        }\r\n        this.selector = tagName + (id === '' ? '' : '#' + id) + (className === '' ? '' : '.' + className.replace(' ', '.'))\r\n\r\n        // Define value property for input fields.\r\n        if (tagName === 'input' || tagName === 'textarea' || tagName === 'select') {\r\n            Object.defineProperty(this, 'value', {\r\n                get() {\r\n                    return this.node.value\r\n                },\r\n                set(v) {\r\n                    this.node.value = v\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets one or few styles of the node.\r\n     * If style argument is string only one style will be set to value.\r\n     * If style argument is object styles will be set from its properties \r\n     * and value will be omitted.\r\n     * \r\n     * @param {string|object} style \r\n     * @param {*} value \r\n     */\r\n    css(style, value) {\r\n        if (typeof style === 'object') {\r\n            for (let p in style) {\r\n                this.node.style[p] = style[p]\r\n            }\r\n        } else {\r\n            this.node.style[style] = value\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets or gets attribute of the node.\r\n     * To get attribute value must be omitted.\r\n     * \r\n     * @param {string} name \r\n     * @param {*} value \r\n     */\r\n    attr(name, value) {\r\n        if (value === undefined) {\r\n            return this.node.getAttribute(name)\r\n        }\r\n        this.node.setAttribute(name, value)\r\n    }\r\n\r\n    /**\r\n     * Returns node of the element.\r\n     * @return {HTMLElement}\r\n     */\r\n    node() {\r\n        return this.node\r\n    }\r\n}\r\n\r\nElement.symbol = elementSymbol\r\n\r\n\r\n\r\n\r\n\r\n// Hook all native events and process them using custom handler.\r\n// Its necessary to avoid using node property and attach events handler directly to the element.\r\n// For example inside onRender() method:\r\n// this.form.on('submit', e => this.sendRequest())\r\n\r\n// List of events tht will be hooked\r\nlet nativeEvents = [\r\n    'submit', 'abort', 'beforeinput', 'blur', 'click', 'compositionen', 'paste',\r\n    'compositionstart', 'compositionupdate', 'dblclick', 'error', 'focus', 'change',\r\n    'focusin', 'focusout', 'input', 'keydown', 'keypress', 'keyup', 'load',\r\n    'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseout', 'mouseover', 'mousewheel',\r\n    'mouseup', 'resize', 'scroll', 'select', 'unload', 'wheel', 'touchstart', 'touchend', 'touchmove'\r\n]\r\n\r\n// Define custom handler\r\nfunction eventHook(event, ...params) {\r\n    let parent = event.target\r\n    if (parent.hasOwnProperty(elementSymbol)) {\r\n        event.targetElement = parent[elementSymbol]\r\n    }\r\n    while (parent !== null && parent.hasOwnProperty(elementSymbol)) {\r\n        parent[elementSymbol][eventsSymbol].triggerDirect(event.type, event, ...params)\r\n        parent = parent.parentNode\r\n    }  \r\n}\r\n\r\n// Attach handler\r\nfor (let i = 0, len = nativeEvents.length; i < len; i++) {\r\n    document.addEventListener(nativeEvents[i], eventHook, {\r\n        capture: true\r\n    })\r\n}","import Element from './Element';\r\nimport {camelCaseToDashSeparated} from '../utils/parsing';\r\n\r\nexport default class Styles\r\n{\r\n    constructor(data) {\r\n        this.cssObject = data;\r\n        this.cssString = '';\r\n        this.styleNode = null;\r\n\r\n        if (Styles.headNode === undefined) {\r\n            Styles.headNode = document.getElementsByTagName('head')[0];\r\n        }\r\n    }\r\n\r\n    renderFor(ui, enforce) {\r\n        // Don't do anything if styles already rendered and enforce is not required.\r\n        if (this.cssString !== '' && enforce !== true) {\r\n            return;\r\n        }\r\n\r\n        // Render styles.\r\n        this.cssString = Styles.renderRules(ui, ui.rootElement.selector, this.cssObject);\r\n\r\n        // Remove old style node.\r\n        if (this.styleNode !== null) {\r\n            Styles.headNode.removeChild(this.styleNode);\r\n        }\r\n\r\n        // Create new style node and append it to head.\r\n        this.styleNode = document.createElement('style');\r\n        this.styleNode.textContent = \"\\n\" + this.cssString + \"\\n\";\r\n        Styles.headNode.appendChild(this.styleNode);\r\n    }\r\n\r\n\r\n    static renderRules(target, selector, rules) {\r\n        let res = selector + \" {\\n\";\r\n        let nestedRes = '';\r\n        let prefix = '    ';\r\n\r\n        for (let p in rules) {\r\n            let v = rules[p];\r\n            if (typeof v === 'string' || typeof v === 'number') {\r\n                res += prefix + camelCaseToDashSeparated(p) + ': ' + rules[p] + \";\\n\";\r\n            } else if (target[p]) {\r\n                let t = target[p] instanceof Element ? target[p] : target[p].rootElement;\r\n                nestedRes += Styles.renderRules(t, selector + ' > ' + t.selector, v);\r\n            } else if (p[0] === ':' || p[0] === '.' || p[0] === '[' || p[0] === '#' || p[0] === ' ' || p[0] === '>') {\r\n                nestedRes += Styles.renderRules(target, selector + p, v);\r\n            } else if (p[0] === '@') {\r\n                nestedRes += Styles.renderRules(target, p, v)\r\n            } else {\r\n                res += Styles.renderRules(target, p, v);\r\n            }\r\n        }\r\n        return res + \"}\\n\" + nestedRes;\r\n    }\r\n}","import Element from './Element';\r\nimport {parseId, parseClassNames, parseTagName, camelCaseToDashSeparated} from '../utils/parsing';\r\nimport { tagNameSymbol, idSymbol, classesArraySymbol, dataSymbol, selectorSymbol } from './symbols';\r\n\r\n\r\nexport default class Scheme\r\n{\r\n    constructor(selector, data) {\r\n        if (typeof selector === 'object') {\r\n            data = selector;\r\n            selector = '';\r\n        }\r\n\r\n        if (typeof data !== 'object') {\r\n            data = {};\r\n        }\r\n\r\n        this[tagNameSymbol]  = camelCaseToDashSeparated(parseTagName(selector));\r\n        this[idSymbol]       = parseId(selector);\r\n        this[classesArraySymbol] = parseClassNames(selector);\r\n        this[dataSymbol]     = data;\r\n        this[selectorSymbol] = this[tagNameSymbol];\r\n\r\n        if (this[idSymbol] !== '') {\r\n            this[selectorSymbol] += '#' + this[idSymbol];\r\n        }\r\n\r\n        if (this[classesArraySymbol].length > 0) {\r\n            this[selectorSymbol] += '.' + this[classesArraySymbol].join('.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds scheme and returns root element.\r\n     * @param {Scheme} scheme\r\n     * @param {string} [namespace]\r\n     */\r\n    static build(scheme, namespace) {\r\n        if (namespace === undefined || namespace === '') {\r\n            namespace = '';\r\n        } else {\r\n            namespace = '.' + camelCaseToDashSeparated(namespace);\r\n        }\r\n\r\n        // Prepare root element.\r\n        let rootElement = new Element(scheme[selectorSymbol] + namespace);\r\n\r\n        // Render all nested items into the root element.\r\n        let data = scheme[dataSymbol];\r\n        for (let p in data) {\r\n\r\n            // If item represented as string - convert it into the scheme.\r\n            if (typeof data[p] === 'string') {\r\n                data[p] = new Scheme(data[p].indexOf('.') < 0 ? data[p] + '.' + p : data[p]);\r\n            }\r\n\r\n            let newClass = camelCaseToDashSeparated(p)\r\n\r\n            // If item is scheme - build it into the root element.\r\n            if (data[p] instanceof Scheme) {\r\n                rootElement[p] = Scheme.build(data[p]);\r\n                rootElement[p].selector += '.' + newClass\r\n                rootElement[p].node.classList.add(newClass)\r\n                rootElement.node.appendChild(rootElement[p].node)\r\n\r\n            // If item is UI - append it to the root element.    \r\n            } else if (typeof data[p].appendTo === 'function') {\r\n                data[p].rootElement.selector += '.' + newClass\r\n                data[p].rootElement.node.classList.add(newClass)\r\n                data[p].appendTo(rootElement);\r\n                rootElement[p] = data[p];\r\n            } else if (typeof data[p] === 'object') {\r\n                rootElement[p] = Scheme.build(new Scheme(data[p]));\r\n                rootElement[p].selector += '.' + newClass\r\n                rootElement[p].node.classList.add(newClass)\r\n                rootElement.node.appendChild(rootElement[p].node);\r\n            }\r\n        }\r\n        return rootElement;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","let counter = 0;\r\n\r\n\r\n\r\nexport default function getUniqueId() {\r\n    counter++;\r\n    return 'uis-id-' + counter;\r\n}","import Styles from \"./Styles\"\r\nimport Scheme from \"./Scheme\"\r\nimport Element from './Element'\r\nimport getUniqueId from '../utils/id-generator'\r\nimport { classesArraySymbol, classNameSymbol, eventsSymbol, isStylesRendered } from './symbols'\r\nimport Extendable from './Extendable'\r\n\r\n\r\nexport default class UI extends Extendable\r\n{\r\n    constructor(params) {\r\n        super()\r\n\r\n        // Ensure that class name is specified.\r\n        if (!this.constructor.hasOwnProperty(classNameSymbol)) {\r\n            this.constructor[classNameSymbol] = getUniqueId()\r\n        }\r\n\r\n        // Purify params.\r\n        let defaultParams = this.defaultParams()\r\n        this.params = typeof params === 'object' ? params : {}\r\n\r\n        // Copy params from default that are absent in the given.\r\n        if (typeof defaultParams === 'object' && typeof params === 'object') {\r\n            for (let p in defaultParams) {\r\n                if (!this.params.hasOwnProperty(p)) {\r\n                    this.params[p] = defaultParams[p]\r\n                }\r\n            }\r\n        }\r\n\r\n        // Run initialization method.\r\n        this.init(...arguments)\r\n\r\n        // Do all dirty work :)\r\n        this.render(this.params);\r\n\r\n        if (!this.constructor.hasOwnProperty(isStylesRendered)) {\r\n            this.createStyles().renderFor(this, false)\r\n            this.constructor[isStylesRendered] = true\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allows to initialize additional parameters before rendering.\r\n     * This method may be overridden in sub-class.\r\n     * \r\n     * @param {Object} params \r\n     */\r\n    init(params) {}\r\n\r\n    /**\r\n     * Creates scheme of the UI.\r\n     * The good reason is to keep all structure inside one container (usually named \"wrap\").\r\n     * \r\n     * @return {Scheme}\r\n     */\r\n    createScheme() {\r\n        return new Scheme({});\r\n    }\r\n\r\n    /**\r\n     * Overrides parameters that was defined for rendering.\r\n     * This method called before creating any nodes but after initialization of parameters.\r\n     * \r\n     * @param {Object} params\r\n     */\r\n    onBeforeRender(params) {}\r\n\r\n    /**\r\n     * Handles rendering of the UI.\r\n     * This method called just after instance creation.\r\n     * \r\n     * @param {Object} params\r\n     */\r\n    onRender(params) {}\r\n\r\n    /**\r\n     * Renders UI with given parameters.\r\n     * \r\n     * @param {Object} params \r\n     */\r\n    render(params) {\r\n        this.onBeforeRender(params);\r\n        this.trigger('beforeRender');\r\n\r\n        let scheme = this.createScheme();\r\n\r\n        if (typeof scheme === 'string') {\r\n            scheme = new Scheme(scheme);\r\n        } else if (!(scheme instanceof Scheme)) {\r\n            scheme = new Scheme('div', scheme);\r\n        }\r\n\r\n        let namespace = scheme[classesArraySymbol].join(' ')\r\n        if (namespace.length <= 1 || namespace === 'Function') {\r\n            namespace = this.constructor[classNameSymbol]\r\n        } else {\r\n            namespace = ''\r\n        }\r\n        this.rootElement = Scheme.build(scheme, namespace);\r\n\r\n        for (let p in this.rootElement) {\r\n            if (this.rootElement.hasOwnProperty(p) && (this.rootElement[p] instanceof Element || this.rootElement[p] instanceof UI)) {\r\n                this[p] = this.rootElement[p];\r\n            }\r\n        }\r\n\r\n        this.onRender(params);\r\n        this.trigger('render');\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Override this method to change target in which UI will be rendered to.\r\n     * To change target just return another target.\r\n     * \r\n     * @param {string|Element} target \r\n     */\r\n    onBeforeAppend(target) {\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * Appends UI to the given target.\r\n     * If target is string it will be considered as CSS selector.\r\n     * \r\n     * @param {string|Element|UI} target \r\n     */\r\n    appendTo(target) {\r\n        // Allow user to override target.\r\n        let tmpTarget = this.onBeforeAppend(target);\r\n        this.trigger('beforeAppend');\r\n\r\n        if (tmpTarget !== undefined) {\r\n            target = tmpTarget;\r\n        }\r\n\r\n        let targetNode = target;\r\n        if (typeof target === 'string') {\r\n            targetNode = document.querySelector(target);\r\n        } else if (target instanceof Element) {\r\n            targetNode = target.node;\r\n        } else if (target instanceof UI) {\r\n            targetNode = target.rootElement.node;\r\n        }\r\n\r\n        targetNode.appendChild(this.rootElement.node);\r\n\r\n        this.onAppend(target);\r\n        this.trigger('append', target);\r\n    }\r\n\r\n    /**\r\n     * This method will be called just after appending.\r\n     * \r\n     * @param {string|Element} target \r\n     */\r\n    onAppend(target) {}\r\n\r\n  \r\n\r\n    /**\r\n     * Called before loading.\r\n     * Use this method to modify data to be loaded.\r\n     * \r\n     * @param {Object} data\r\n     */\r\n    onBeforeLoad(data) {}\r\n\r\n    /**\r\n     * Modifies or overrides default loading logic.\r\n     * To override loading prevent default of the given event.\r\n     * This method should modify given data object.\r\n     * \r\n     * @param {Object} data \r\n     * @param {Event} event\r\n     */\r\n    onLoad(data, event) {}\r\n\r\n    /**\r\n     * Modifies or overrides default gathering logic.\r\n     * To override gathering prevent default of the given event.\r\n     * \r\n     * @param {Object} data \r\n     * @param {Event} event \r\n     */\r\n    onGather(data, event) {}\r\n\r\n    /**\r\n     * Returns styles of the UI.\r\n     * This method must be overridden in the child class.\r\n     * \r\n     * @return {Styles}\r\n     */\r\n    createStyles() {\r\n        return new Styles({});\r\n    }\r\n\r\n    /**\r\n     * Defines initial parameters of the UI.\r\n     * Can be overridden by sub-class.\r\n     * Can returns any static object because all properties will be copied in the final params.\r\n     * IMPORTANT! Nested objects will be copied as references.\r\n     * \r\n     * @return {Object|null}\r\n     */\r\n    defaultParams() {\r\n        return null;\r\n    }\r\n}","import UI from './core/UI';\r\nimport Scheme from './core/Scheme';\r\nimport Styles from './core/Styles';\r\nimport EventsChannel from './core/EventsChannel';\r\nimport Localization from './core/Localization';\r\n\r\nexport default {\r\n    UI, Scheme, Styles, EventsChannel, Localization,\r\n    builtIn: {\r\n        ui: {\r\n            Button,\r\n            Input,\r\n            Select,\r\n            ProgressBar,\r\n            LabeledText,\r\n            Spinner\r\n        },\r\n        extensions: {\r\n            InputFilter\r\n        }\r\n    }\r\n}","import { eventsSymbol } from './symbols';\r\nimport EventsChannel from './EventsChannel';\r\n\r\nexport default class Localization\r\n{\r\n    constructor(data) {\r\n        this.locale = 'en'\r\n        this.translations = data || {}\r\n\r\n        this[eventsSymbol] = new EventsChannel()\r\n\r\n        this.translate = (text, data) => {\r\n            let msg = text\r\n            if (this.translations.hasOwnProperty(this.locale) && this.translations[this.locale].hasOwnProperty(text)) {\r\n                msg = this.translations[this.locale][text]\r\n            }\r\n            if (typeof data === 'object') {\r\n                for (let p in data) {\r\n                    msg = msg.replace('{' + p + '}', data[p])\r\n                }\r\n            }\r\n            return msg\r\n        }\r\n    }\r\n\r\n    switchLocaleTo(locale) {\r\n        this.locale = locale\r\n        this.trigger('change', locale)\r\n    }\r\n\r\n    /**\r\n     * Adds event listener.\r\n     * Can be used named listeners:\r\n     * chat.on('newMessage -> tray', function() { // ... });\r\n     * \r\n     * @param {string} eventName \r\n     * @param {function} handler \r\n     */\r\n    on(eventName, handler) {\r\n        this[eventsSymbol].on(eventName, handler)\r\n    }\r\n\r\n    /**\r\n     * Removes event listener.\r\n     * \r\n     * @param {string} eventName \r\n     * @param {function} [handler]\r\n     */\r\n    off(eventName, handler) {\r\n        this[eventsSymbol].off(eventName, handler)\r\n    }\r\n\r\n    /**\r\n     * Fires event with given name.\r\n     * \r\n     * @param {*} eventName \r\n     * @param  {...any} data \r\n     */\r\n    trigger(eventName, ...data) {\r\n        this[eventsSymbol].trigger(eventName, ...data)\r\n    }\r\n}"],"names":["allowedTagNames","tagNameRegex","classNamesRegex","idRegex","parseTagName","selector","tagName","match","length","includes","msg","console","warn","undefined","parseClassNames","classNames","i","camelCaseToDashSeparated","slice","parseId","id","trim","str","replace","split","splitByUpperCase","join","toLowerCase","selectorSymbol","Symbol","dataSymbol","classesArraySymbol","classNameSymbol","idSymbol","tagNameSymbol","eventsSymbol","extensionsSymbol","elementSymbol","isStylesRendered","channels","EventsChannel","[object Object]","context","this","name","handlers","eventName","handler","arr","forEach","el","a","hasOwnProperty","HandlersHub","addHandler","removePortHandler","removeAllHandlers","params","runPortHandler","runAllHandlers","ports","port","push","call","p","Extendable","on","off","data","trigger","super","Element","node","document","createElement","className","Object","defineProperty","value","v","style","getAttribute","setAttribute","symbol","nativeEvents","eventHook","event","parent","target","targetElement","triggerDirect","type","parentNode","len","addEventListener","capture","Styles","cssObject","cssString","styleNode","headNode","getElementsByTagName","ui","enforce","renderRules","rootElement","removeChild","textContent","appendChild","rules","res","nestedRes","t","Scheme","scheme","namespace","indexOf","newClass","build","classList","add","appendTo","counter","UI","constructor","defaultParams","init","arguments","render","createStyles","renderFor","onBeforeRender","createScheme","onRender","tmpTarget","onBeforeAppend","targetNode","querySelector","onAppend","Localization","locale","translations","translate","text","builtIn","Button","Input","Select","ProgressBar","LabeledText","Spinner","extensions","InputFilter"],"mappings":"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"}